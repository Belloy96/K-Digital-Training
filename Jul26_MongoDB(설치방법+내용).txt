MongoDB

(MongoDB검색 후 Product -> Community Edition -> Download Community)

https://www.mongodb.com/try/download/community (이 링크 타고)
-> version 5.0.28/Windows x64/msi Download (이 버전 다운로드/버전 유의)

다운받은 파일 실행 후 Next 넘기다가,

1. Complete 클릭
	Complete / Custom 두개 중 Complete 클릭
	
2. 체크 해제 1
Install MongoD as a Service - 체크 해제
	= Windows에서 GUI 프로그램을 제어하겠다
	-> 우리는 cmd로 제어할것이기 때문에 해제

3. 체크 해제 2
Install MongoDB Compass(좌측 하단에 있음) 체크 해제
	= MongoDB 접속 GUI 프로그램
	-> 우리는 cmd로 제어할것이기 때문에 해제

----------------------------------------------------------------------------------
MongoDB 설치를 끝냈으니, 서버를 열어줘야함 !
1) DB파일이 저장될 폴더 확보(가급적 한글x)
C:\Users\tpgns\Desktop\mDB

2) MongoDB 실행파일이 있는 위치
C:\Program Files\MongoDB\Server\5.0\bin
	환경 변수 검색 -> 시스템 환경 변수 편집 클릭
	우측 하단 환경 변수 클릭
	밑에 있는 시스템 변수 칸에서
	Path 찾기 -> 편집
	새로만들기 -> 위의 경로 복붙해서 새로 만들기
	확인
	
		=> 이 폴더 위치에서 cmd 실행

3) mongod --dbpath DB파일저장될 경로 --bind_ip_all
mongod --dbpath C:\Users\tpgns\Desktop\mDB --bind_ip_all
	많은 text들이 뜨는데, 이 cmd창은 종료하지 말것(= 서버를 열고있다는 의미임!)
----------------------------------------------------------------------------------
MongoDB서버 OFF
	서버 ON cmd에서 Ctrl + C or cmd창 닫기
----------------------------------------------------------------------------------
접속하기
MongoDB 실행파일이 있는 경로에서
	cmd 하나 더 열기(현재 서버ON 열려있는 상황!)
	cmd창에 mongo 입력!
----------------------------------------------------------------------------------
MongoDB 6버전 이상부터 mongo 명령어가 사라져서
5버전대로 설치 (6버전 이상부터는 mongoshell을 설치해서 사용해야 함)
----------------------------------------------------------------------------------
정형 데이터 - 미세먼지
번호	위치	미세먼지 초미세먼지
1	강남구	25.0	10.0

비정형 데이터 - 블로그 글, 뉴스 기사

RDB-SQL (Structured Query Language) (ex: Oracle, MySQL, MariaDB, ...) 관계형 데이터베이스
	테이블을 만들고... (자료형, 용량 다 세팅)
	그 규칙에 맞지 않으면... => 에러!!
	=> 정형 데이터

NoSQL (No SQL, Non-Relational Optional DataBase SQL) (ex: MongoDB, ElasticSearch(검색 엔진이지만 DB의 성격이 강해서 DB로도 쳐주는 편), ...)
	=> 자유 !!!
----------------------------------------------------------------------------------
MongoDB
	NoSQL 계열
	Node.js(JavaScript back-end) 팀에서 만든 DB => JavaScript로 제어
	테이블 => JS배열
	데이터 => JS객체

	크로스 플랫폼의 document 지향 Database
	높은 성능 (high performance)
	높은 사용성 (high availability)
	쉬운 확장성 (easy scalability) 등을 제공

		[RDBMS와 비교] (용어)
	Oracle			MongoDB
	Database			Database
	Table				Collection
	Tuple / row			Document	
	Column			Field
	Primary key			Primary key (Default : _id)

	1. Database
	하나의 데이터베이스에는 여러 개의 컬렉션을 가질 수 있음

	2. Collection
	Document의 그룹이며, RDBMS의 'Table' 개념

	3. Document
	하나의 키(Key)와 값(Value)의 집합으로 이루어져 있음
	동일한 필드 안에 다른 타입의 데이터를 가질 수 있음
----------------------------------------------------------------------------------
만들어진 database 확인
	show dbs
내가 현재 사용하고 있는 database 확인
	db
db 사용하기
	DB를 정의하는게 없음
	사용하기만 존재
	사용할 때 해당 DB이름이 없으면
			=> 알아서 만들어 줌

	use DB명
	use test
DB 제거하기
	db.dropDatabase();
----------------------------------------------------------------------------------
CRUD
		use jul26_student
	
		현재 데이터베이스의 사용 현황
		db.stats()
		bytes 단위로 사용현황을 조회

<insert>
db.collection명.insert( { 속성명: 값, 속성명: 값, ...  } );

-- 학생의 이름, 나이 => 5개 정도 insert / collection명 : jul26_student
db.jul26_student.insert( { name: 'kim', age: 29 } );
db.jul26_student.insert( { name: 'na', age: 31 } );
db.jul26_student.insert( { name: 'lee', age: 21 } );
db.jul26_student.insert( { name: 'jeong', age: 32 } );
db.jul26_student.insert( { name: 'hwang', age: 27, kor: 100 } );
								국어점수를 그냥 넣어도 제대로 나오는 것을 볼 수 있음

	primary key - '_id' 필드
	따로 지정을 안해주면 자동으로 생성
	not null - 의미 없음
	(필드가 존재해야하기 때문에)


들어간 결과를 확인하고 싶으면..
db.jul26_student.find();
----------------------------------------------------------------------------------
여러개를 추가 : 배열을 활용 => 데이터를 담아주기
coffee => PK지정(커피 이름), 커피 가격 => 5개 / 컬렉션명 jul26_coffee

db.jul26_coffee.insert( [ 
	{ _id : "Americano", price : 3000},
	{ _id : "Cafe Latte", price : 3500},
	{ _id : "Vanila Latte", price : 4000},
	{ _id : "Espresso", price : 2500},
	{ _id : "Milk Shake", price : 4500}
] );
db.jul26_coffee.find();
----------------------------------------------------------------------------------
OracleDB : server > DB > tablespace > table > data
MongoDB : server > DB > 		> JS배열 > JS객체


< SELECT >
- 결과가 JS배열 속에 JS객체의 형태로 나올 수 밖에...
	=> JSON, python의 list + dict

전체 조회
	db.collection명.find();

조건 검색
	db.collection명.find( { 필드명 : 값 } );

-- 가격이 3000원인 커피 정보 조회
	Oracle로 했으면 (where c_price = 3000)
	db.jul26_coffee.find( { price : 3000 } );

	- 이상, 이하, 초과, 미만
	db.collection명.find( { 필드명 : {"연산자" : 값 } } );
	연산자 : $lt(미만), $lte(이하), $gt(초과), $gte(이상)
	-- 가격이 3000원 초과인 커피의 정보 가져오기
	db.jul26_coffee.find( { price : { "$gt" : 3000 } } );

	- 문자열 포함 검색
	Oracle로 했다면(where _id like '%Latte%')
	글자 포함검색 연산자 : $regex
	db.collection명.find( { 필드명 : {"연산자" : 값 } } );
	-- 문자열에 Latte가 있는 커피의 정보 가져오기
	db.jul26_coffee.find( { _id : { "$regex" : "Latte" } } );
----------------------------------------------------------------------------------
< Update >
	db.collection명.update( 찾을거, 바꿀거 );
	db.jul26_coffee.update( { _id : "Americano" }, { price : 5000 } );

	위의 방식으로는 한계가 있어서..."$set" 연산자 사용	
	db.collection명.update( 찾을거, { "$set" : {바꿀거} } );
	db.jul26_coffee.update( { _id : "Espresso" }, { "$set" : { price : 3000 } } );

	- 가격이 4000원 이상인 커피를 모두 무료('free') 로
	db.jul26_coffee.update( { price : { "$gte" : 4000 } }, { "$set" : { price : "free" } } );	
	 
	여기까지만 하고 실행을 했을 때, 첫 데이터만 적용이 되고 나머지는 되지 않을 것을 확인할 수 있음
	
	영향을 받을 데이터가 여러개라면  => { multi : true }
	조건문 뒤에 , 넣고 	{ multi : true } 넣기

	db.jul26_coffee.update( { price : { "$gte" : 4000 } }, { "$set" : { price : "free" } }, { multi : true } );	
	db.jul26_coffee.find();

----------------------------------------------------------------------------------
< Delete >
	db.collection명.remove( 찾을거 );
	- 가격이 100원 이상인거 삭제 (multi true를 굳이 쓸 필요는 없음)
	db.jul26_coffee.remove( { price : { "$gte" : 100 } } );
	db.jul26_coffee.find();
----------------------------------------------------------------------------------

